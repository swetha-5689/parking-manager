setupNotes.txt

mlab mongodb login cred:
    clo64@scarletmail.rutgers.edu
    102282Chuck

Using Learn the MERN stack YouTube Video
npm init //this command sets up the package.json file
npm i express body-parser mongoose concurrently //this line installs express, mongoose for working with 
                                                // mongoDB and concurrently for running client/server same time
npm i -D nodemon

we add scripts to the "scripts" section of package.json
    "scripts": {
    "start": "server.js",
    "server": "nodemon server.js"
This lets us update without having to constantly reload

Add body-parser syntax to server.js

Next, we create a mongoDB cluster for free at mLab

The mongo URI
mongodb+srv://chuck:<password>@mernshopping-dulm0.mongodb.net/test?retryWrites=true&w=majority

Next setup the mongoDB schema, schemas map to Mongo DB and define the shape of the documents within collection

Then we create a folder routes, and a subfolder api. Inside there a file items.js
This serves as an api for to handle the get and put requests.

POSTMAN for testing the puts and gets and deletes. Pretty kewl

Routes Explained

/items is a test route, not used
/liveprice  get: returns the all of the values associated with the active price model
            post: updates the values of the active price model
            There is no option to change the model's name, gets and posts operate on a hardcoded 
            document entry
/testprice  get: finds a price model by name, the idea was that admin could experiment with models
                 and name them via the convention PM-1.. etc.
            post: Accepts the fiels operation: "makenew" or operation: "update" to wither save
                  a new price model by name or edit one by name
/getprice   get: Get request must include two new fields in addition to the price model fields: 
                 start: "00:00" and end: "00:00" -> These are used to compute a price for the time 
                 a person is parked.
            post: NO post option here
/liverevenue get: This get request is used specifically for the admin panel View option.
                  The JSON return includes the hourly revenue due to the dynamic variabels 
                  in the live price model, the hourly revenue due to the base rate stored in the 
                  live revenue model, the total dynamic revenue for the day and the rest of the
                  variable values stored in the live model
